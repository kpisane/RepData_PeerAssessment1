?mapply
str(mapply)
str(tapply)
str(split)
?split
swirl
swirl()
swirl::
swirl()
library(swirl)
swirl()
end
bye()
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list<- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
sapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals<-lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
bye()
end
esc
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
debugonce(makeVector)
makeVector(1)
source('~/.active-rstudio-document')
makeVector(c(1,4,6))
cachemean(c(1,4,6))
?list
cachemean(makeVector(c(1,4,6)))
cachemean(makeVector(c(1,4,6)))
cachemean(makeVector(c(1,4,6)))
m<-NULL
x<-matrix(c(-3,1,2,6),2,2)
x<<-y
y<<-x
m<<-NULL
get<-function() x
get
get(y)
source('C:/Users/Kelly/Desktop/DataScience/Intro to R Course/week 3 assignment/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(x)
source('C:/Users/Kelly/Desktop/DataScience/Intro to R Course/week 3 assignment/ProgrammingAssignment2/cachematrix.R')
cacheSolve(makeCacheMatrix(x))
s<-NULL
is.null(s)
!is.null(s)
source('C:/Users/Kelly/Desktop/DataScience/Intro to R Course/week 3 assignment/ProgrammingAssignment2/cachematrix.R')
str(makeCacheMatrix)
q()
library(lattice)
library(datasets)
xyplot(Ozone ~ Wind, data = airquality)
airquality <- transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1))
p <- xyplot(Ozone ~ Wind, data = airquality)
print(p)
set.seed(10)
x <- rnorm(100)
f <- rep(0:1, each = 50)
y <- factor(f, labels = c("Group 1", "Group 2"))
set.seed(10)
x <- rnorm(100)
f <- rep(0:1, each = 50)
y <- x + f - f*x+rnorm(100, sd = 0.5)
f <- factor(f, labels = c("Group 1", "Group 2"))
xyplot(y ~ x | f, layout = c(2,1))
xyplot(y ~ x | f, panel = function(x,y,...){
panel.xyplot(x,y,...) #call the default panel fn
panel.abline(h = median(y), lty = 2) # add horiz line
})
xyplot(y ~ x | f, panel = function(x,y,...){
panel.xyplot(x,y,...) #call the default panel fn
panel.abline(h = median(y), lty = 2) # add horiz line
}, layout = c(2,1))
xyplot(y ~ x | f, panel = function(x,y,...){
panel.xyplot(x,y,...) #call the default panel fn
panel.lmline(x,y,col = 2) # add horiz line
}, layout = c(2,1))
library(ggplot2)
str(mpg)
swirl()
library(swirl)
swirl()
head(airquality)
xyplot(Ozone ~ Wind, airquality)
xyplot(Ozone ~ Wind, airquality, col = "red", pch = 8, main = "Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, col = "red", pch = 8, main = "Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, pch = 8, col = "red", main = "Big Apple Data")
xyplot(Ozone ~ Wind | as.factor(Month), data = airquality, layout = c(5,1))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1))
p <- xyplot(Ozone ~ Wind, data = airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f, layout = c(2,1))
v1
v2
myedit("plot1.R")
source(pathtofile("plot1.R"), local = TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local = TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit(myLabels.R)
myedit("myLabels.R")
pathtofile("myLabels.R", local = TRUE)
source(pathtofile("myLabels.R"), local = TRUE)
xyplot(price~carat | color*cut, data = diamonds, strip = FALSE, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
xyplot(price~carat | color*cut, data = diamonds, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
sample(colors(), 10)
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(seq(0,1,len = 6))
p1 <- colorRampPalette(c("red", "blue"))
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette(c("red", "yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?rgb
p3 <- colorRampPalette(c("blue", "green"), alpha = 0.5)
p3(5)
plot(x, y, pch= 19, col= rgb(0, 0.5, 0.5))
plot(x, y, pch= 19, col= rgb(0, 0.5, 0.5, 0.3))
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(3))
showMe(pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
bye()
bye
bye()
exit()
quit()
library(swirl)
siwrl()
swirl()
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(y = hwy, data = mpg, color = drv)
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = .~drv)
qplot(hwy, data = mpg, facets = drv~.)
qplot(hwy, data = mpg, facets = drv~., binwidth = 2)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv)
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g + geom_point()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth(method = "lm")
g + geom_point() + geom_smooth(method = "lm") + facet_grid(.~drv)
g + geom_point() + geom_smooth(method = "lm") + facet_grid(.~drv) + ggtitle("Swirl Rules!")
g + geom_point(color = "pink", size = 4, alpha = 1/2)
g + geom_point(size = 4, alpha = 1/2, aes(color = drv))
g + geom_point(color = aes(drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g = geom_point(aes(color = drv), size = 2, alpha = 1/2) +geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color = drv), size = 2, alpha = 1/2) +geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
plot(myx, myy, type = "l", ylim = c(-3, 3))
g <- ggplot(testdat, aes(x = myx, y = myy))
g + geom_line()
g + geom_line() + ylim(-3, 3)
g + geom_line() + coord_cartesian(ylim = c(-3,3))
g <- ggplot(mpg, aes(x = displ, y = hwy, color = factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv~cyl, margins = TRUE)
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diaomonds, binwidth = 18497/30)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", aes(color = cut))
qplot(price, data = diamonds, geom = "density", color = cut)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut)+ geom_smooth(method = "lm")
qplot(carat, price, data = diamonds, color = cut, facets = .~cut)+ geom_smooth(method = "lm")
g <- ggplot(data = diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha = 1/3)
cutpoints <- quantile(diamonds$carat, seq(0, 1, length = 4), na.rm = TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth, price))
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2)
diamonds[myd,]
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2) + geom_smooth(method = "lm", size = 3, color = "pink")
ggplot(diamonds, aes(carat, price))+geom_boxplot()+ facet_grid(.~cut)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
?lattice
?trellis.par.set
?panel.abline
quit()
getwd()
setwd("../")
setwd("./Desktop/DataScience")
list.files()
setwd("./Reproducible Research")
list.files
list.files('')
list.files()
setwd("./RepData_PeerAssessment1")
library(ggplot2)
?ggplot
unzip("activity.zip")
activity <- read.csv("activity.csv")
dailyTotals <- as.data.frame(tapply(activity$steps, activity$date, sum, na.rm = TRUE))
colnames(dailyTotals) <- c("totalSteps")
head(dailyTotals)
dates <- rownames(dailyTotals)
rownames(dailyTotals) <- NULL
dailyTotals <- cbind(dates, dailyTotals)
colnames(dailyTotals) <- c("dates", "totalSteps")
hist(dailyTotals$totalSteps, xlab = "Total Steps (daily)", ylab = "Frequency", main = "Daily Steps", col = "red")
medianTotal <- median(dailyTotals$totalSteps)
meanTotal <- mean(dailyTotals$totalSteps)
intervalMeans <- as.data.frame(tapply(activity$steps, activity$interval, mean, na.rm = TRUE))
intervals <- as.numeric(rownames(intervalMeans))
rownames(intervalMeans) <- NULL
intervalMeans <- cbind(intervals, intervalMeans)
colnames(intervalMeans) <- c("intervals", "meanSteps")
head(intervalMeans)
with(intervalMeans, plot(intervals, meanSteps, type = "l", main = "Mean Steps per 5 Minute Interval", xlab = "Time (minutes)", ylab = "Mean Number of Steps"))
i <- which(intervalMeans$meanSteps == max(intervalMeans$meanSteps))
highest <- intervalMeans$intervals[i]
highValue <- intervalMeans$meanSteps[i]
NAs <- sum(is.na(activity$steps))
activity2 <- activity
for(i in 1:17568){
if(is.na(activity2$steps[i])){
activity2$steps[i] <- intervalMeans$meanSteps[which(intervalMeans$intervals == activity2$interval[i])]
}
}
dailyTotals2 <- as.data.frame(tapply(activity2$steps, activity2$date, sum, na.rm = TRUE))
colnames(dailyTotals2) <- c("totalSteps")
head(dailyTotals2)
dates <- rownames(dailyTotals2)
rownames(dailyTotals2) <- NULL
dailyTotals2 <- cbind(dates, dailyTotals2)
colnames(dailyTotals2) <- c("dates", "totalSteps")
hist(dailyTotals2$totalSteps, xlab = "Total Steps (daily)", ylab = "Frequency", main = "Daily Steps", col = "red")
medianTotal2 <- median(dailyTotals2$totalSteps)
meanTotal2 <- mean(dailyTotals2$totalSteps)
weeks <- weekdays(as.Date(activity2$date))
wkends <- c("Saturday", "Sunday")
days <- rep(0, length(weeks))
for (i in 1:length(weeks)){
if (weeks[i] %in% wkends){
days[i] <- "Weekend"
} else {
days[i] <- "Weekday"
}
}
activity2 <- cbind(activity2, days = as.factor(days))
head(activity2)
library(lattice)
?xyplot
library(lattice)
with(activity2, xyplot(steps~interval|days))
with(activity2, xyplot(steps~interval|days, strip = TRUE))
with(activity2, stripplot(steps~interval|days))
with(activity2, xyplot(steps~interval|days, strip = TRUE))
with(activity2, xyplot(steps~interval|days, strip = TRUE, type = "l"))
with(dailyTotals2, xyplot(steps~interval|days, strip = TRUE, type = "l"))
head(dailyTotals2)
intervalMeans2 <- as.data.frame(tapply(activity2$steps, activity2$interval, mean, na.rm = TRUE))
intervals <- as.numeric(rownames(intervalMeans))
rownames(intervalMeans2) <- NULL
intervalMeans2 <- cbind(intervals, intervalMeans2)
#colnames(intervalMeans2) <- c("intervals", "meanSteps")
head(intervalMeans)
wkdays <- select(activity2, days = "Weekday")
library(dplyr)
wkdays <- select(activity2, days = "Weekday")
wkdays <- select(activity2, days = Weekday)
library(dplyr)
?select
wkdays <- select(activity2, days == Weekday)
wkdays <- select(activity2, days == "Weekday")
head(activity2)
wkdays <- select(activity2, days == weekdays())
wkdays <- select(activity2, days == weekday
)
wkdays <- activity2[days=="Weekday",]
wkdays <- select(activity2, days == Weekday)
wkdays <- select(activity2, days == "Weekday")
wkdays <- select(activity2, days = "Weekday")
wkdays <- activity2[days=="Weekday",]
wkdays <- activity2[days=="Weekday",]
wkends <- activity2[days=="Weekend",]
wkdays <- as.data.frame(tapply(wkdays$steps, wkdays$interval, mean))
wkends <- as.data.frame(tapply(wkends$steps, wkdays$interval, mean))
wkends <- as.data.frame(tapply(wkends$steps, wkends$interval, mean))
intervalMeans2 <- rbind(wkdays, wkends)
head(wkdays)
wkdays <- as.data.frame(tapply(wkdays$steps, wkdays$interval, mean))
wkdays <- activity2[days=="Weekday",]
wkends <- activity2[days=="Weekend",]
wkdays <- as.data.frame(tapply(wkdays$steps, wkdays$interval, mean))
colnames(wkdays) <- c("interval", "mean steps")
wkdays
wkdays <- cbind(row.names(wkdays), wkdays)
colnames(wkdays) <- c("interval", "mean steps")
wkends <- cbind(row.names(wkends), wkends)
colnames(wkends) <- c("interval", "mean steps")
intervalMeans2 <- rbind(wkdays, wkends)
head(wkends)
library(dplyr)
wkdays <- activity2[days=="Weekday",]
wkends <- activity2[days=="Weekend",]
wkdays <- as.data.frame(tapply(wkdays$steps, wkdays$interval, mean))
wkdays <- cbind(row.names(wkdays), wkdays)
colnames(wkdays) <- c("interval", "mean steps")
wkends <- as.data.frame(tapply(wkends$steps, wkends$interval, mean))
wkends <- cbind(row.names(wkends), wkends)
colnames(wkends) <- c("interval", "mean steps")
intervalMeans2 <- rbind(wkdays, wkends)
head(intervalMeans2)
wkdays <- as.data.frame(tapply(wkdays, wkdays$interval, mean))
wkdays <- cbind(row.names(wkdays), wkdays, as.factor(rep("Weekday", length(wkdays$interval))))
head(wkdays)
library(dplyr)
wkdays <- activity2[days=="Weekday",]
wkends <- activity2[days=="Weekend",]
wkdays <- as.data.frame(tapply(wkdays$steps, wkdays$interval, mean))
wkdays <- cbind(row.names(wkdays), wkdays, as.factor(rep("Weekday", length(wkdays$interval))))
wkdays <- activity2[days=="Weekday",]
wkends <- activity2[days=="Weekend",]
wkdays <- as.data.frame(tapply(wkdays$steps, wkdays$interval, mean))
wkdays <- cbind(row.names(wkdays), wkdays, as.factor(rep("Weekday", length(wkdays$interval))))
wkdays <- cbind(row.names(wkdays), wkdays, as.factor(rep("Weekday", 288))))
rep
?rep
sa2 <- split(activity2, days)
sa2
?lappy
?lapply
sa2.1 <- lapply(sa2, as.data.frame(tapply(steps, interval, mean)))
str(sa2)
sa2.1 <- lapply(sa2, as.data.frame(tapply(sa2$steps, sa2$interval, mean)))
sa2.1 <- lapply(sa2$Weekday, as.data.frame(tapply(steps, interval, mean)))
sa2[1]
sa2[[1]]
?by
sa2.1 <- by(activity2, days, tapply(steps, interval, mean))
sa2.1 <- by(activity2, days, tapply(activity2$steps, activity2$interval, mean))
tapply
?tapply
sa2.1 <- by(activity2, days, tapply, X = activity2$steps, INDEX = activity2$interval, FUN = mean))
sa2.1 <- by(activity2, days, tapply, X = activity2$steps, INDEX = activity2$interval, FUN = mean)
sa2.1 <- by(activity2, days, tapply, activity2$steps,  activity2$interval, mean)
sa2[["Weekday"]]
sa2.d <- with(sa2[["Weekday"]], tapply(steps, interval, mean))
head(sa2.d)
sa2.d <- as.data.frame(with(sa2[["Weekday"]], tapply(steps, interval, mean)))
head(sa2.d)
seq_along(sa2.d[,1], "Weekday")
sa2.e <- as.data.frame(with(sa2[["Weekend"]], tapply(steps, interval, mean)))
sa2.d <- cbind(sa2.d, as.factor(rep("weekday", length(sa2.d[,1]))))
sa2.e <- cbind(sa2.e, as.factor(rep("weekend", length(sa2.e[,1]))))
sa2.d <- cbind(sa2.d, as.factor(rep("weekday", length(sa2.d[,1]))))
sa2.e <- cbind(sa2.e, as.factor(rep("weekend", length(sa2.e[,1]))))
colnames(sa2.d) <- c("interval", "mean", "day")
colnames(sa2.e) <- c("interval", "mean", "day")
intervalMeans2 <- rbind(sa2.d, sa2.e)
library(lattice)
with(intervalMeans2, xyplot(steps~interval|days))
library(dplyr)
sa2 <- split(activity2, days)
sa2.d <- as.data.frame(with(sa2[["Weekday"]], tapply(steps, interval, mean)))
sa2.e <- as.data.frame(with(sa2[["Weekend"]], tapply(steps, interval, mean)))
# add the weekend and weekday factor back onto the data frames
sa2.d <- cbind(sa2.d, as.factor(rep("weekday", length(sa2.d[,1]))))
sa2.e <- cbind(sa2.e, as.factor(rep("weekend", length(sa2.e[,1]))))
# make the names of the variables match
colnames(sa2.d) <- c("interval", "steps", "day")
head(sa2.e)
library(dplyr)
sa2 <- split(activity2, days)
sa2.d <- as.data.frame(with(sa2[["Weekday"]], tapply(steps, interval, mean)))
sa2.e <- as.data.frame(with(sa2[["Weekend"]], tapply(steps, interval, mean)))
# add the weekend and weekday factor back onto the data frames
sa2.d <- cbind(row.names(sa2.d), sa2.d, as.factor(rep("weekday", length(sa2.d[,1]))))
sa2.e <- cbind(row.names(sa2.e), sa2.e, as.factor(rep("weekend", length(sa2.e[,1]))))
# make the names of the variables match
colnames(sa2.d) <- c("interval", "steps", "day")
colnames(sa2.e) <- c("interval", "steps", "day")
# combine the data frames to make a single data frame containing both the weekend and weekday averages
intervalMeans2 <- rbind(sa2.d, sa2.e)
head(intervalMeans2)
library(lattice)
with(intervalMeans2, xyplot(steps~interval|days))
with(intervalMeans2, xyplot(steps~interval|days))
tail(intervalMeans2)
library(ggplot2)
?ggplot
g <- ggplot(intervalMeans2, aes(interval, steps, Facet = day)) +
geom_abline()
g
g <- ggplot(intervalMeans2, aes(interval, steps, Facet = day))
g + geom(points)
g + geom_path()
g + geom_point()
g <- ggplot(intervalMeans2, aes(interval, steps)) +
geom_line()
g
g <- ggplot(intervalMeans2, aes(interval, steps)) +
geom_line() + facet_grid(day)
head(intervalMeans2)
class(intervalMeans2$day)
g <- ggplot(intervalMeans2, aes(interval, steps)) +
geom_line() + facet_grid(intervalMeans2$day)
g <- ggplot(intervalMeans2, aes(steps~interval|day)) +
geom_line()
g
g <- ggplot(intervalMeans2, aes(interval, steps)) +
geom_line()
g
g <- ggplot(intervalMeans2, aes(interval, steps)) +
geom_line() +
facet_grid(day ~ .)
g
g <- ggplot(intervalMeans2, aes(interval, steps)) +
geom_point() +
facet_grid(day ~ .)
g
?geom_segment
g <- ggplot(intervalMeans2, aes(interval, steps)) +
geom_point() + geom_segment() +
facet_grid(day ~ .)
g
g <- ggplot(intervalMeans2, aes(interval, steps)) +
geom_point() + geom_segment(xend = interval, yend = steps) +
facet_grid(day ~ .)
g <- ggplot(intervalMeans2, aes(interval, steps, group = day)) +
geom_point() + geom_line() +
facet_grid(day ~ .)
g
?geom_point
g <- ggplot(intervalMeans2, aes(interval, steps, group = day)) +
geom_point(size = 5, pch = 20) + geom_line() +
facet_grid(day ~ .)
g
g <- ggplot(intervalMeans2, aes(interval, steps, group = day)) +
geom_point(size = 1, pch = 20) + geom_line() +
facet_grid(day ~ .)
g
