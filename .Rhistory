find.packages("devtools")
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("kernsmooth")
install.packages("KernSmooth")
library(KernSmooth)
install.packages("datasets")
library(datasets)
datasets::uspop
yr<-c(1790:100:1970)
200/18
200/19
uspop
clear
clc
nevermind
oop
oops
help
if
else
end
end
end
clera
clear
datasets::ability.cov
close()
clear
open
help
kelly
is th
kelly
is the best
oop
end
?str
str(apply)
srt(lapply)
str(lapply)
str(apply)
str(mapply)
?mapply
str(mapply)
str(tapply)
str(split)
?split
swirl
swirl()
swirl::
swirl()
library(swirl)
swirl()
end
bye()
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list<- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
sapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals<-lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
bye()
end
esc
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
debugonce(makeVector)
makeVector(1)
source('~/.active-rstudio-document')
makeVector(c(1,4,6))
cachemean(c(1,4,6))
?list
cachemean(makeVector(c(1,4,6)))
cachemean(makeVector(c(1,4,6)))
cachemean(makeVector(c(1,4,6)))
m<-NULL
x<-matrix(c(-3,1,2,6),2,2)
x<<-y
y<<-x
m<<-NULL
get<-function() x
get
get(y)
source('C:/Users/Kelly/Desktop/DataScience/Intro to R Course/week 3 assignment/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(x)
source('C:/Users/Kelly/Desktop/DataScience/Intro to R Course/week 3 assignment/ProgrammingAssignment2/cachematrix.R')
cacheSolve(makeCacheMatrix(x))
s<-NULL
is.null(s)
!is.null(s)
source('C:/Users/Kelly/Desktop/DataScience/Intro to R Course/week 3 assignment/ProgrammingAssignment2/cachematrix.R')
str(makeCacheMatrix)
q()
library(lattice)
library(datasets)
xyplot(Ozone ~ Wind, data = airquality)
airquality <- transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1))
p <- xyplot(Ozone ~ Wind, data = airquality)
print(p)
set.seed(10)
x <- rnorm(100)
f <- rep(0:1, each = 50)
y <- factor(f, labels = c("Group 1", "Group 2"))
set.seed(10)
x <- rnorm(100)
f <- rep(0:1, each = 50)
y <- x + f - f*x+rnorm(100, sd = 0.5)
f <- factor(f, labels = c("Group 1", "Group 2"))
xyplot(y ~ x | f, layout = c(2,1))
xyplot(y ~ x | f, panel = function(x,y,...){
panel.xyplot(x,y,...) #call the default panel fn
panel.abline(h = median(y), lty = 2) # add horiz line
})
xyplot(y ~ x | f, panel = function(x,y,...){
panel.xyplot(x,y,...) #call the default panel fn
panel.abline(h = median(y), lty = 2) # add horiz line
}, layout = c(2,1))
xyplot(y ~ x | f, panel = function(x,y,...){
panel.xyplot(x,y,...) #call the default panel fn
panel.lmline(x,y,col = 2) # add horiz line
}, layout = c(2,1))
library(ggplot2)
str(mpg)
swirl()
library(swirl)
swirl()
head(airquality)
xyplot(Ozone ~ Wind, airquality)
xyplot(Ozone ~ Wind, airquality, col = "red", pch = 8, main = "Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, col = "red", pch = 8, main = "Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, pch = 8, col = "red", main = "Big Apple Data")
xyplot(Ozone ~ Wind | as.factor(Month), data = airquality, layout = c(5,1))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1))
p <- xyplot(Ozone ~ Wind, data = airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f, layout = c(2,1))
v1
v2
myedit("plot1.R")
source(pathtofile("plot1.R"), local = TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local = TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit(myLabels.R)
myedit("myLabels.R")
pathtofile("myLabels.R", local = TRUE)
source(pathtofile("myLabels.R"), local = TRUE)
xyplot(price~carat | color*cut, data = diamonds, strip = FALSE, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
xyplot(price~carat | color*cut, data = diamonds, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
sample(colors(), 10)
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(seq(0,1,len = 6))
p1 <- colorRampPalette(c("red", "blue"))
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette(c("red", "yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?rgb
p3 <- colorRampPalette(c("blue", "green"), alpha = 0.5)
p3(5)
plot(x, y, pch= 19, col= rgb(0, 0.5, 0.5))
plot(x, y, pch= 19, col= rgb(0, 0.5, 0.5, 0.3))
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(3))
showMe(pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
bye()
bye
bye()
exit()
quit()
library(swirl)
siwrl()
swirl()
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(y = hwy, data = mpg, color = drv)
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = .~drv)
qplot(hwy, data = mpg, facets = drv~.)
qplot(hwy, data = mpg, facets = drv~., binwidth = 2)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv)
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g + geom_point()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth(method = "lm")
g + geom_point() + geom_smooth(method = "lm") + facet_grid(.~drv)
g + geom_point() + geom_smooth(method = "lm") + facet_grid(.~drv) + ggtitle("Swirl Rules!")
g + geom_point(color = "pink", size = 4, alpha = 1/2)
g + geom_point(size = 4, alpha = 1/2, aes(color = drv))
g + geom_point(color = aes(drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g = geom_point(aes(color = drv), size = 2, alpha = 1/2) +geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color = drv), size = 2, alpha = 1/2) +geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
plot(myx, myy, type = "l", ylim = c(-3, 3))
g <- ggplot(testdat, aes(x = myx, y = myy))
g + geom_line()
g + geom_line() + ylim(-3, 3)
g + geom_line() + coord_cartesian(ylim = c(-3,3))
g <- ggplot(mpg, aes(x = displ, y = hwy, color = factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv~cyl, margins = TRUE)
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diaomonds, binwidth = 18497/30)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", aes(color = cut))
qplot(price, data = diamonds, geom = "density", color = cut)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut)+ geom_smooth(method = "lm")
qplot(carat, price, data = diamonds, color = cut, facets = .~cut)+ geom_smooth(method = "lm")
g <- ggplot(data = diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha = 1/3)
cutpoints <- quantile(diamonds$carat, seq(0, 1, length = 4), na.rm = TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth, price))
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2)
diamonds[myd,]
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2) + geom_smooth(method = "lm", size = 3, color = "pink")
ggplot(diamonds, aes(carat, price))+geom_boxplot()+ facet_grid(.~cut)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
?lattice
?trellis.par.set
?panel.abline
quit()
getwd()
setwd("../Desktop")
setwd("./DataScience/Reproducible Research")
library(xtable)
install.packages("xtable")
getwd()
setwd("./knitr assignment")
setwd("../")
list.files()
setwd("./RepData_PeerAssessment1")
list.files()
?unz
?unzip
?read.csv
unzip("activity.zip")
read.csv("activity.csv"")
activity <- read.csv("activity.csv")
activity <- read.csv("activity.csv")
head(activity)
class(activity$date)
library(dplyr)
apply(activity$steps, activity$date, sum)
dim(activity$steps)
bydate <- group_by(activity, date)
head(bydate)
summary(bydate)
summarize(bydate)
rm(bydate)
test <- by(activity, date, sum, na.rm = TRUE)
test <- by(activity, activity$date, sum, na.rm = TRUE)
test <- by(activity$steps, activity$date, sum, na.rm = TRUE)
test
class(test)
test2 <- as.vector(test)
class(test2)
test2
test3 <- as.matrix(test)
test3
test2
test3
?hist
daily <- cbind(row.names(dailyTotals), dailyTotals)
dailyTotals <- as.matrix(by(activity$steps, activity$date, sum, na.rm = TRUE))
daily <- cbind(row.names(dailyTotals), dailyTotals)
dailyTotals <- as.data.frame(by(activity$steps, activity$date, sum, na.rm = TRUE))
class(activity)
?tapply
dailyTotals <- tapply(activity$steps, activity$date, sum, na.rm = TRUE))
dailyTotals <- tapply(activity$steps, activity$date, sum, na.rm = TRUE)
head(dailyTotals)
summary(dailyTotals)
?apply
dailyTotals <- tapply(activity$steps, activity$date, sum, na.rm = TRUE, simplify = FALSE)
dailyTotals
dailyTotals <- apply(activity$steps, activity$date, sum, na.rm = TRUE)
?apply
dailyTotals <- apply(activity, activity$date, sum, na.rm = TRUE)
dailyTotals <- tapply(activity$steps, activity$date, sum, na.rm = TRUE)
class(dailyTotals)
as.data.frame.Date(dailyTotals)
dailyTotals <- as.data.frame(tapply(activity$steps, activity$date, sum, na.rm = TRUE))
dailyTotals <- as.data.frame(tapply(activity$steps, activity$date, sum, na.rm = TRUE))
dates <- row.names(dailyTotals)
row.names(dailyTotals) <- NULL
dailyTotals <- cbind(names, dailyTotals)
dailyTotals <- cbind(dates, dailyTotals)
head(dailyTotals)
colnames(dailyTotals) <- c("dates", "stepTotal")
head(dailyTotals)
hist(dailyTotals)
hist(dailyTotals$stepTotal)
hist(dailyTotals)
dailyTotals <- as.data.frame(tapply(activity$steps, activity$date, sum, na.rm = TRUE))
head(dailyTotals)
dailyTotals <- as.data.frame(totalSteps = tapply(activity$steps, activity$date, sum, na.rm = TRUE))
dailyTotals <- as.data.frame(tapply(activity$steps, activity$date, sum, na.rm = TRUE))
head(dailyTotals)
head(dailyTotals)
colnames(dailyTotals) <- totalSteps
dailyTotals <- as.data.frame(tapply(activity$steps, activity$date, sum, na.rm = TRUE))
colnames(dailyTotals) <- "totalSteps""
""
head(dailyTotals)
head(dailyTotals)
colnames(dailyTotals) <- "totalSteps"
column.names(dailyTotals) <- "totalSteps"
colnames(dailyTotals) <- c("totalSteps")
head(dailyTotals)
hist(dailyTotals)
hist(dailyTotals)
dailyTotals
hist(dailyTotals)
hist(strpname(dailyTotals))
dailyTotals[,1]
dates <- rownames(dailyTotals)
rownames(dailyTotals) <- NULL
dailyTotals <- cbind(dates, dailyTotals)
hist(dailyTotals)
hist(dailyTotals[,2])
colnames(dailyTotals) <- c("dates", "totalSteps")
hist(dailyTotals[,2])
hist(dailyTotals$totalSteps)
?hist
hist(dailyTotals$totalSteps, xlab = "Total Steps (daily)", ylab = "Frequency", main = "Daily Steps")
hist(dailyTotals$totalSteps, xlab = "Total Steps (daily)", ylab = "Frequency", main = "Daily Steps")
intervalMeans <- as.data.frame(tapply(activity$steps, activity$interval, mean, na.rm = TRUE))
head(intervalMeans)
?plot
plot(intervalMeans$intervals, intervalMeans$meanSteps)
head(intervalMeans)
intervals <- row.names(intervalMeans)
rownames(intervalMeans) <- NULL
intervalMeans <- cbind(intervals, intervalMeans)
colnames(intervalMeans) <- c("intervals", "meanSteps")
head(intervalMeans)
plot(intervalMeans$intervals, intervalMeans$meanSteps)
plot(intervalMeans$intervals, intervalMeans$meanSteps, type = "l")
?plot
plot(intervalMeans$intervals, intervalMeans$meanSteps, type = l)
?ggplot
?ggplot
??ggplot
g <- ggplot(intervalMeans)
library(ggplot2)
g <- ggplot(intervalMeans)
g
?ggplot
g <- ggplot(intervalMeans, mapping = aes(intervals, meanSteps)) +
geom_line()
g
g <- ggplot(intervalMeans, mapping = aes(intervals, meanSteps))
g + geom_point()
g + geom_line()
g + geom_point()
?plot
?with
with(intervalMeans, plot(intervals, meanSteps))
with(intervalMeans, plot(intervals, meanSteps, type = "l"))
with(intervalMeans, plot(intervals, meanSteps, type = "c"))
with(intervalMeans, plot(intervals, meanSteps, type = "o"))
intervalMeans <- as.data.frame(tapply(activity$steps, activity$interval, mean, na.rm = TRUE))
intervals <- rownames(intervalMeans)
rownames(intervalMeans) <- NULL
intervalMeans <- cbind(intervals, intervalMeans)
colnames(intervalMeans) <- c("intervals", "meanSteps")
head(intervalMeans)
plot(intervalMeans$intervals, intervalMeans$meanSteps, type = "l")
library(lattice)
?lattice
with(intervalMeans, plot(intervals, meanSteps, type = "l"))
with(intervalMeans, plot(intervals, meanSteps, type = "l"))
with(intervalMeans, plot(intervals, meanSteps, type = "c"))
with(intervalMeans, plot(intervals, meanSteps, type = "c"))
with(intervalMeans, lines(intervals, meanSteps, type = "c"))
with(intervalMeans, lines(intervals, meanSteps))
as.numeric(intervals)
intervalMeans <- as.data.frame(tapply(activity$steps, activity$interval, mean, na.rm = TRUE))
intervals <- as.numeric(rownames(intervalMeans))
rownames(intervalMeans) <- NULL
intervalMeans <- cbind(intervals, intervalMeans)
colnames(intervalMeans) <- c("intervals", "meanSteps")
head(intervalMeans)
with(intervalMeans, plot(intervals, meanSteps, type = "l", main = "Mean Steps per 5 Minute Interval", xlab = "Interval (minutes)))
)
")
""
with(intervalMeans, plot(intervals, meanSteps, type = "l", main = "Mean Steps per 5 Minute Interval", xlab = "Interval (minutes)"))
with(intervalMeans, plot(intervals, meanSteps, type = "l", main = "Mean Steps per 5 Minute Interval", xlab = "Time (minutes)", ylab = "Mean Number of Steps"))
which(intervalMeans$meanSteps == max(intervalMeans$meanSteps))
highest <- which(intervalMeans$meanSteps == max(intervalMeans$meanSteps))
max(intervalMeans$meanSteps)
which(intervalMeans$meanSteps == 206.1698)
which(intervalMeans$meanSteps == max(intervalMeans$meanSteps))
intervalMeans$intervals[835,104]
intervalMeans$intervals[835]
intervalMeans$intervals[104]
intervalMeans[830:840,]
intervalMeans
which(max(intervalMeans$meanSteps))
max(intervalMeans$meanSteps)
which(intervalMeans$meanSteps == max(intervalMeans$meanSteps))
test <- which(intervalMeans$meanSteps == max(intervalMeans$meanSteps))
test
